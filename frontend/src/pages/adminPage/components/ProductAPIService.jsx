// apiService.js - Helper ƒë·ªÉ qu·∫£n l√Ω c√°c API endpoints ri√™ng l·∫ª

const API_BASE_URL = 'http://localhost:8080/api'; // Thay b·∫±ng URL API th·ª±c t·∫ø

// Mapping c√°c lo·∫°i s·∫£n ph·∫©m v·ªõi endpoints
const PRODUCT_ENDPOINTS = {
    'Camera': 'cameras',
    'Mirrorless': 'cameras',
    'DSLR': 'cameras',
    'Laptop': 'laptops',
    'ƒêi·ªán tho·∫°i': 'smartphones',
    'Phone': 'smartphones',
    'Smartphone': 'smartphones',

    // Aliases ƒë·ªÉ d·ªÖ truy c·∫≠p
    'cameras': 'cameras',
    'laptops': 'laptops',
    'phones': 'smartphones'
};

// L·∫•y endpoint ph√π h·ª£p d·ª±a tr√™n lo·∫°i s·∫£n ph·∫©m
export const getProductEndpoint = (product) => {
    const category = product.category || product.type || product.productType;
    const endpoint = PRODUCT_ENDPOINTS[category];

    if (endpoint) {
        console.log(`üìç Product type: ${category} ‚Üí API endpoint: ${endpoint}`);
        return endpoint;
    }

    console.log(`üìç Unknown product type: ${category} ‚Üí Using default endpoint: cameras`);
    return 'cameras'; // Default endpoint
};

// L·∫•y token authentication
const getAuthToken = () => {
    return localStorage.getItem('authToken') || localStorage.getItem('accessToken');
};

// Headers m·∫∑c ƒë·ªãnh cho API calls
const getHeaders = () => {
    const token = getAuthToken();
    return {
        'Content-Type': 'application/json',
        ...(token && { 'Authorization': `Bearer ${token}` })
    };
};

// API Service class
export class ProductAPIService {

    // L·∫•y s·∫£n ph·∫©m theo lo·∫°i c·ª• th·ªÉ
    static async getProductsByType(productType) {
        try {
            const endpoint = PRODUCT_ENDPOINTS[productType];
            if (!endpoint) {
                throw new Error(`Kh√¥ng h·ªó tr·ª£ lo·∫°i s·∫£n ph·∫©m: ${productType}`);
            }

            const url = `${API_BASE_URL}/${endpoint}/`;

            console.log('üîÑ Fetching products by type:', productType, '‚Üí', url);

            const response = await fetch(url, {
                method: 'GET',
                headers: getHeaders()
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`HTTP ${response.status}: ${errorText}`);
            }

            const data = await response.json();

            if (data.code === 1000 && Array.isArray(data.result)) {
                console.log(`‚úÖ Fetched ${productType} products:`, data.result.length);
                return data.result;
            } else {
                throw new Error('Invalid API response format');
            }
        } catch (error) {
            console.error(`‚ùå Error fetching ${productType} products:`, error);
            throw error;
        }
    }

    // Th√™m s·∫£n ph·∫©m m·ªõi
    static async addProduct(productData) {
        try {
            const endpoint = getProductEndpoint(productData);
            const url = `${API_BASE_URL}/${endpoint}/`;

            console.log('üîÑ Adding product to:', url);
            console.log('üì§ Product data:', productData);

            const response = await fetch(url, {
                method: 'POST',
                headers: getHeaders(),
                body: JSON.stringify(productData)
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`HTTP ${response.status}: ${errorText}`);
            }

            const result = await response.json();
            console.log('‚úÖ Product added successfully:', result);
            return result;
        } catch (error) {
            console.error('‚ùå Error adding product:', error);
            throw error;
        }
    }

    // C·∫≠p nh·∫≠t s·∫£n ph·∫©m
    static async updateProduct(product, updateData) {
        try {
            const endpoint = getProductEndpoint(product);
            const url = `${API_BASE_URL}/${endpoint}/${product.id}`;

            console.log('üîÑ Updating product:', url);
            console.log('üì§ Update data:', updateData);

            const response = await fetch(url, {
                method: 'PUT',
                headers: getHeaders(),
                body: JSON.stringify(updateData)
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`HTTP ${response.status}: ${errorText}`);
            }

            const result = await response.json();
            console.log('‚úÖ Product updated successfully:', result);
            return result;
        } catch (error) {
            console.error('‚ùå Error updating product:', error);
            throw error;
        }
    }

    // X√≥a s·∫£n ph·∫©m
    static async deleteProduct(product) {
        try {
            const endpoint = getProductEndpoint(product);
            const url = `${API_BASE_URL}/${endpoint}/${product.id}`;

            console.log('üîÑ Deleting product:', url);

            const response = await fetch(url, {
                method: 'DELETE',
                headers: getHeaders()
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`HTTP ${response.status}: ${errorText}`);
            }

            console.log('‚úÖ Product deleted successfully');
            return true;
        } catch (error) {
            console.error('‚ùå Error deleting product:', error);
            throw error;
        }
    }

    // L·∫•y t·∫•t c·∫£ cameras
    static async getAllCameras() {
        return this.getProductsByType('cameras');
    }

    // L·∫•y t·∫•t c·∫£ laptops
    static async getAllLaptops() {
        return this.getProductsByType('laptops');
    }

    // L·∫•y t·∫•t c·∫£ phones
    static async getAllPhones() {
        return this.getProductsByType('phones');
    }
}

// Export default cho d·ªÖ s·ª≠ d·ª•ng
export default ProductAPIService;